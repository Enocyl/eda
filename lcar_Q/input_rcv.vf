////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : input_rcv.vf
// /___/   /\     Timestamp : 12/09/2021 14:15:09
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: D:\software\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family aspartan6 -verilog ../input_rcv.vf -w ../input_rcv.sch
//Design Name: input_rcv
//Device: aspartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FD8CE_HXILINX_input_rcv(Q, C, CE, CLR, D);

   
   output [7:0]       Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input  [7:0]       D;
   
   reg    [7:0]       Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 8'b0000_0000;
	else if (CE)
          Q <= D;
     end
   
   
endmodule
`timescale 1ns / 1ps

module fd1_MUSER_input_rcv(CK, 
                           D, 
                           Q);

    input CK;
    input D;
   output Q;
   
   
   FD #( .INIT(1'b0) ) XLXI_1 (.C(CK), 
              .D(D), 
              .Q(Q));
endmodule
`timescale 1ns / 1ps

module fd8_MUSER_input_rcv(CK, 
                           I, 
                           O);

    input CK;
    input [7:0] I;
   output [7:0] O;
   
   wire XLXN_3;
   wire XLXN_4;
   
   (* HU_SET = "XLXI_1_0" *) 
   FD8CE_HXILINX_input_rcv  XLXI_1 (.C(CK), 
                                   .CE(XLXN_4), 
                                   .CLR(XLXN_3), 
                                   .D(I[7:0]), 
                                   .Q(O[7:0]));
   GND  XLXI_2 (.G(XLXN_3));
   VCC  XLXI_3 (.P(XLXN_4));
endmodule
`timescale 1ns / 1ps

module rx_ctrld_MUSER_input_rcv(CLK, 
                                CMD_BRIGHTNESS, 
                                CMD_CT_BLUE, 
                                CMD_CT_GREEN, 
                                CMD_CT_RED, 
                                CMD_GAMMA, 
                                CMD_M4_BANK1, 
                                CMD_M4_ON, 
                                CMD_TEST_PAD, 
                                C_DONE, 
                                DSW_PAD_UPDATE, 
                                MEM_PAD, 
                                MEM_PAD_ENA, 
                                M4_SET_DONE, 
                                PA_PAC_STP, 
                                PA_RXD, 
                                PA_RX_DV, 
                                PA_RX_ER, 
                                PA_RX_OK, 
                                PA_RX50HZ, 
                                PA_VP, 
                                BRIGHTNESS, 
                                COLOR_LOSS, 
                                COLOR_LOSS_ON_N, 
                                CTRLD_CSUM_OK, 
                                CT_BLUE, 
                                CT_GREEN, 
                                CT_RED, 
                                ER_UPDATE, 
                                FRAME_ALT, 
                                FRAME_ALT_FRZ, 
                                FREEZE, 
                                FR_RATE, 
                                GAMMA, 
                                HSTP, 
                                H_SIZE, 
                                M4_BANK1, 
                                M4_BRT, 
                                M4_ON, 
                                OUT_CH, 
                                OVP, 
                                PAC_STP, 
                                PAC1_OK, 
                                PANEL_NUM, 
                                PNL_ADRS_UPDATE, 
                                REBOOT_N, 
                                RXD, 
                                RX_FAN_ON, 
                                RX_IM_DOWNLOAD, 
                                RX_OK, 
                                RX50HZ, 
                                TOTAL_PANEL, 
                                UPDATE_ER_ON, 
                                UPDATE_PNL_NUM, 
                                VSTP, 
                                V_SIZE);

    input CLK;
    input [6:0] CMD_BRIGHTNESS;
    input [3:0] CMD_CT_BLUE;
    input [3:0] CMD_CT_GREEN;
    input [3:0] CMD_CT_RED;
    input [2:0] CMD_GAMMA;
    input CMD_M4_BANK1;
    input CMD_M4_ON;
    input [7:0] CMD_TEST_PAD;
    input C_DONE;
    input DSW_PAD_UPDATE;
    input [9:0] MEM_PAD;
    input MEM_PAD_ENA;
    input M4_SET_DONE;
    input PA_PAC_STP;
    input [7:0] PA_RXD;
    input PA_RX_DV;
    input PA_RX_ER;
    input PA_RX_OK;
    input PA_RX50HZ;
    input PA_VP;
   output [6:0] BRIGHTNESS;
   output [2:0] COLOR_LOSS;
   output COLOR_LOSS_ON_N;
   output CTRLD_CSUM_OK;
   output [3:0] CT_BLUE;
   output [3:0] CT_GREEN;
   output [3:0] CT_RED;
   output ER_UPDATE;
   output FRAME_ALT;
   output FRAME_ALT_FRZ;
   output FREEZE;
   output [15:0] FR_RATE;
   output [2:0] GAMMA;
   output [10:0] HSTP;
   output [10:0] H_SIZE;
   output M4_BANK1;
   output [6:0] M4_BRT;
   output M4_ON;
   output [2:0] OUT_CH;
   output OVP;
   output PAC_STP;
   output PAC1_OK;
   output [9:0] PANEL_NUM;
   output PNL_ADRS_UPDATE;
   output REBOOT_N;
   output [7:0] RXD;
   output RX_FAN_ON;
   output RX_IM_DOWNLOAD;
   output RX_OK;
   output RX50HZ;
   output [9:0] TOTAL_PANEL;
   output UPDATE_ER_ON;
   output [9:0] UPDATE_PNL_NUM;
   output [10:0] VSTP;
   output [10:0] V_SIZE;
   
   wire XLXN_216;
   wire XLXN_218;
   wire XLXN_274;
   wire XLXN_275;
   wire RX50HZ_DUMMY;
   wire PAC_STP_DUMMY;
   wire OVP_DUMMY;
   wire [7:0] RXD_DUMMY;
   wire RX_OK_DUMMY;
   
   assign OVP = OVP_DUMMY;
   assign PAC_STP = PAC_STP_DUMMY;
   assign RXD[7:0] = RXD_DUMMY[7:0];
   assign RX_OK = RX_OK_DUMMY;
   assign RX50HZ = RX50HZ_DUMMY;
   ctrld_reg  ctrld_reg0 (.clk(CLK), 
                         .cmd_brightness(CMD_BRIGHTNESS[6:0]), 
                         .cmd_ct_blue(CMD_CT_BLUE[3:0]), 
                         .cmd_ct_green(CMD_CT_GREEN[3:0]), 
                         .cmd_ct_red(CMD_CT_RED[3:0]), 
                         .cmd_gamma(CMD_GAMMA[2:0]), 
                         .cmd_m4_bank1(CMD_M4_BANK1), 
                         .cmd_m4_on(CMD_M4_ON), 
                         .cmd_test_pat(CMD_TEST_PAD[7:0]), 
                         .c_done(C_DONE), 
                         .d(RXD_DUMMY[7:0]), 
                         .dsw_pad_update(DSW_PAD_UPDATE), 
                         .mem_pad(MEM_PAD[9:0]), 
                         .mem_pad_ena(MEM_PAD_ENA), 
                         .m4_set_done(M4_SET_DONE), 
                         .ovp(OVP_DUMMY), 
                         .pac_stp(PAC_STP_DUMMY), 
                         .pixel_disp_on(), 
                         .rx_dv(XLXN_218), 
                         .rx_er(XLXN_216), 
                         .rx_ok(RX_OK_DUMMY), 
                         .sel_port_b(), 
                         .test_dsw(), 
                         .backup(), 
                         .brightness(BRIGHTNESS[6:0]), 
                         .color_loss(COLOR_LOSS[2:0]), 
                         .color_loss_on_n(COLOR_LOSS_ON_N), 
                         .ctrld_csum_ok(CTRLD_CSUM_OK), 
                         .ct_blue(CT_BLUE[3:0]), 
                         .ct_green(CT_GREEN[3:0]), 
                         .ct_red(CT_RED[3:0]), 
                         .er_update(ER_UPDATE), 
                         .fr_rate(FR_RATE[15:0]), 
                         .gamma(GAMMA[2:0]), 
                         .hstp(HSTP[10:0]), 
                         .h_size(H_SIZE[10:0]), 
                         .m4_bank1(M4_BANK1), 
                         .m4_brt(M4_BRT[6:0]), 
                         .m4_on(M4_ON), 
                         .out_ch(OUT_CH[2:0]), 
                         .pac1_ok(PAC1_OK), 
                         .panel_num(PANEL_NUM[9:0]), 
                         .pnl_adrs_update(PNL_ADRS_UPDATE), 
                         .reboot_n(REBOOT_N), 
                         .rx_fan_on(RX_FAN_ON), 
                         .rx_im_download(RX_IM_DOWNLOAD), 
                         .test_pat(), 
                         .total_panel(TOTAL_PANEL[9:0]), 
                         .update_er_on(UPDATE_ER_ON), 
                         .update_pnl_num(UPDATE_PNL_NUM[9:0]), 
                         .vstp(VSTP[10:0]), 
                         .v_size(V_SIZE[10:0]));
   freeze_ctrl_a  freeze_ctrl_a0 (.clk(CLK), 
                                 .c_done(C_DONE), 
                                 .ovp(OVP_DUMMY), 
                                 .pac_stp(PAC_STP_DUMMY), 
                                 .rxd(RXD_DUMMY[7:0]), 
                                 .rx_ok(RX_OK_DUMMY), 
                                 .sel_port_chngp(), 
                                 .frame_alt_frz(FRAME_ALT_FRZ), 
                                 .freeze(FREEZE));
   ovp_gen_b  ovp_gen_b0 (.clk(CLK), 
                         .f50hz(RX50HZ_DUMMY), 
                         .rx_ok(RX_OK_DUMMY), 
                         .rx_vp(PA_VP), 
                         .adv_int_vp(XLXN_274), 
                         .frame_alt(FRAME_ALT), 
                         .over_vp(), 
                         .ovp(OVP_DUMMY), 
                         .rx_vp_sel(XLXN_275));
   pac_stp_gen  pac_stp_gen0 (.clk(CLK), 
                             .int_vp(XLXN_274), 
                             .rx_pac_stp(PA_PAC_STP), 
                             .rx_vp_sel(XLXN_275), 
                             .pac_stp(PAC_STP_DUMMY));
   fd8_MUSER_input_rcv  XLXI_26 (.CK(CLK), 
                                .I(PA_RXD[7:0]), 
                                .O(RXD_DUMMY[7:0]));
   fd1_MUSER_input_rcv  XLXI_27 (.CK(CLK), 
                                .D(PA_RX_DV), 
                                .Q(XLXN_218));
   fd1_MUSER_input_rcv  XLXI_28 (.CK(CLK), 
                                .D(PA_RX_ER), 
                                .Q(XLXN_216));
   fd1_MUSER_input_rcv  XLXI_36 (.CK(CLK), 
                                .D(PA_RX50HZ), 
                                .Q(RX50HZ_DUMMY));
   fd1_MUSER_input_rcv  XLXI_38 (.CK(CLK), 
                                .D(PA_RX_OK), 
                                .Q(RX_OK_DUMMY));
endmodule
`timescale 1ns / 1ps

module rs232c_emb_MUSER_input_rcv(CLK, 
                                  EMB_TX_DATA, 
                                  EMB_TX_REQ, 
                                  FRAME_ALT, 
                                  RXD, 
                                  SDI_FAN_ON, 
                                  STARTN, 
                                  STARTN_DLY, 
                                  CMD_RX_REQ, 
                                  CMD_TX_REQ, 
                                  EMB_BAUD_RATE, 
                                  EMB_RSP_DATA, 
                                  EMB_RSP_REQ, 
                                  EMB_TP_OUT, 
                                  HUMIDITY1, 
                                  HUMIDITY2, 
                                  POWER1, 
                                  POWER2, 
                                  POWER3, 
                                  POWER4, 
                                  POWER5, 
                                  POWER6, 
                                  POWER7, 
                                  POWER8, 
                                  POWER9, 
                                  RXD_O, 
                                  TEMPERATURE1, 
                                  TEMPERATURE2, 
                                  TXD);

    input CLK;
    input [79:0] EMB_TX_DATA;
    input EMB_TX_REQ;
    input FRAME_ALT;
    input RXD;
    input SDI_FAN_ON;
    input STARTN;
    input STARTN_DLY;
   output CMD_RX_REQ;
   output CMD_TX_REQ;
   output [1:0] EMB_BAUD_RATE;
   output [79:0] EMB_RSP_DATA;
   output EMB_RSP_REQ;
   output [7:0] EMB_TP_OUT;
   output [15:0] HUMIDITY1;
   output [15:0] HUMIDITY2;
   output [15:0] POWER1;
   output [15:0] POWER2;
   output [15:0] POWER3;
   output [15:0] POWER4;
   output [15:0] POWER5;
   output [15:0] POWER6;
   output [15:0] POWER7;
   output [15:0] POWER8;
   output [15:0] POWER9;
   output RXD_O;
   output [15:0] TEMPERATURE1;
   output [15:0] TEMPERATURE2;
   output TXD;
   
   wire H;
   wire L;
   wire RST;
   wire TX_TIMEOUT;
   wire [7:0] XLXN_12;
   wire XLXN_80;
   wire [7:0] XLXN_81;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_85;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_138;
   wire [79:0] XLXN_142;
   wire [79:0] XLXN_144;
   wire XLXN_154;
   wire XLXN_159;
   wire RXD_O_DUMMY;
   wire CMD_RX_REQ_DUMMY;
   wire CMD_TX_REQ_DUMMY;
   wire [1:0] EMB_BAUD_RATE_DUMMY;
   
   assign CMD_RX_REQ = CMD_RX_REQ_DUMMY;
   assign CMD_TX_REQ = CMD_TX_REQ_DUMMY;
   assign EMB_BAUD_RATE[1:0] = EMB_BAUD_RATE_DUMMY[1:0];
   assign RXD_O = RXD_O_DUMMY;
   VCC  XLXI_5 (.P(H));
   GND  XLXI_6 (.G(L));
   fd1_MUSER_input_rcv  XLXI_7 (.CK(CLK), 
                               .D(STARTN), 
                               .Q(XLXN_138));
   uart_if_emb  XLXI_14 (.clk(CLK), 
                        .cmd_tx_req(CMD_TX_REQ_DUMMY), 
                        .rst(RST), 
                        .rx_data(XLXN_81[7:0]), 
                        .rx_frm_err(XLXN_82), 
                        .rx_prty_err(XLXN_83), 
                        .rx_time_out_on(H), 
                        .rx_vld(XLXN_80), 
                        .tx_busy(XLXN_99), 
                        .tx_cmd_data(XLXN_142[79:0]), 
                        .tx_done(XLXN_100), 
                        .cmd_rx_req(CMD_RX_REQ_DUMMY), 
                        .cmd_tx_done(), 
                        .rcv_ok(XLXN_85), 
                        .rx_cmd_data(XLXN_144[79:0]), 
                        .rx_time_out(), 
                        .tx_brk(), 
                        .tx_data(XLXN_12[7:0]), 
                        .tx_vld(XLXN_98));
   (* IOSTANDARD = "DEFAULT" *) (* IBUF_DELAY_VALUE = "0" *) (* 
         IFD_DELAY_VALUE = "AUTO" *) 
   IBUF  XLXI_15 (.I(RXD), 
                 .O(RXD_O_DUMMY));
   OR2  XLXI_16 (.I0(XLXN_154), 
                .I1(STARTN_DLY), 
                .O(XLXN_159));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_18 (.I(XLXN_159), 
                 .O(TXD));
   uart_core_mpc_a  XLXI_19 (.brdsel(EMB_BAUD_RATE_DUMMY[1:0]), 
                            .clk(CLK), 
                            .prtysel({L, L}), 
                            .rst(RST), 
                            .rxd(RXD_O_DUMMY), 
                            .stpsel(L), 
                            .tx_brk(L), 
                            .tx_data(XLXN_12[7:0]), 
                            .tx_vld(XLXN_98), 
                            .rx_brk(), 
                            .rx_data(XLXN_81[7:0]), 
                            .rx_frm_err(XLXN_82), 
                            .rx_prty_err(XLXN_83), 
                            .rx_vld(XLXN_80), 
                            .txd(XLXN_154), 
                            .tx_busy(XLXN_99), 
                            .tx_done(XLXN_100));
   OR3  XLXI_21 (.I0(TX_TIMEOUT), 
                .I1(XLXN_138), 
                .I2(STARTN), 
                .O(RST));
   cmd_if_emb_xt_a  XLXI_22 (.clk(CLK), 
                            .cmd_rx_req(CMD_RX_REQ_DUMMY), 
                            .ext_cmd_data(EMB_TX_DATA[79:0]), 
                            .ext_cmd_tx_req(EMB_TX_REQ), 
                            .fan_set_ena(L), 
                            .frame_alt(FRAME_ALT), 
                            .humid_ena({L, L}), 
                            .pwr_ena({H, H, H, H, H, H, H, H, H}), 
                            .rcv_ok(XLXN_85), 
                            .rst(RST), 
                            .rx_cmd_data(XLXN_144[79:0]), 
                            .rx_timeout_set({L, L, L, L, H, H, H}), 
                            .sdi_fan_cmd_ena(L), 
                            .sdi_fan_on(SDI_FAN_ON), 
                            .sensor_port_sel({L, L}), 
                            .temp_ena({L, H}), 
                            .cmd_tx_req(CMD_TX_REQ_DUMMY), 
                            .emb_baud_rate(EMB_BAUD_RATE_DUMMY[1:0]), 
                            .humidity1(HUMIDITY1[15:0]), 
                            .humidity2(HUMIDITY2[15:0]), 
                            .power1(POWER1[15:0]), 
                            .power2(POWER2[15:0]), 
                            .power3(POWER3[15:0]), 
                            .power4(POWER4[15:0]), 
                            .power5(POWER5[15:0]), 
                            .power6(POWER6[15:0]), 
                            .power7(POWER7[15:0]), 
                            .power8(POWER8[15:0]), 
                            .power9(POWER9[15:0]), 
                            .rsp_data(EMB_RSP_DATA[79:0]), 
                            .rsp_rx_req(EMB_RSP_REQ), 
                            .sens_num(), 
                            .temperature1(TEMPERATURE1[15:0]), 
                            .temperature2(TEMPERATURE2[15:0]), 
                            .tp_out(EMB_TP_OUT[7:0]), 
                            .tx_cmd_data(XLXN_142[79:0]), 
                            .tx_timeout(TX_TIMEOUT));
endmodule
`timescale 1ns / 1ps

module tx_process_MUSER_input_rcv(CLK25M, 
                                  DST_IP, 
                                  DST_MAC, 
                                  DST_PORT, 
                                  frame_alt, 
                                  HUMID1, 
                                  HUMID2, 
                                  LINK_ON, 
                                  POWER1, 
                                  POWER2, 
                                  RX_OK, 
                                  SRC_IP, 
                                  SRC_MAC, 
                                  SRC_PORT, 
                                  SS_NE, 
                                  tcm_e, 
                                  tcm_v, 
                                  tcm_wd, 
                                  TEMP1, 
                                  TEMP2, 
                                  TX_CLK, 
                                  TXD, 
                                  TX_EN);

    input CLK25M;
    input [31:0] DST_IP;
    input [47:0] DST_MAC;
    input [15:0] DST_PORT;
    input frame_alt;
    input [15:0] HUMID1;
    input [15:0] HUMID2;
    input LINK_ON;
    input [15:0] POWER1;
    input [15:0] POWER2;
    input RX_OK;
    input [31:0] SRC_IP;
    input [47:0] SRC_MAC;
    input [15:0] SRC_PORT;
    input SS_NE;
    input tcm_e;
    input tcm_v;
    input [7:0] tcm_wd;
    input [15:0] TEMP1;
    input [15:0] TEMP2;
    input TX_CLK;
   output [3:0] TXD;
   output TX_EN;
   
   wire L;
   wire [8:0] tcm_ra;
   wire [7:0] txd_in;
   wire txen_in;
   wire tx_done;
   
   rtn_mux_lcar_ru  rtn_mux_0 (.clk25M(CLK25M), 
                              .frame_alt(frame_alt), 
                              .humid1(HUMID1[15:0]), 
                              .humid2(HUMID2[15:0]), 
                              .link_on(LINK_ON), 
                              .power1(POWER1[15:0]), 
                              .power2(POWER2[15:0]), 
                              .rx_ok(RX_OK), 
                              .ss_ne(SS_NE), 
                              .tcm_e(tcm_e), 
                              .tcm_ra(tcm_ra[8:0]), 
                              .tcm_v(tcm_v), 
                              .tcm_wd(tcm_wd[7:0]), 
                              .temp1(TEMP1[15:0]), 
                              .temp2(TEMP2[15:0]), 
                              .tx_clk(TX_CLK), 
                              .tx_done(tx_done), 
                              .dout(txd_in[7:0]), 
                              .tx_en(txen_in), 
                              .tx_on());
   tx_mii_udp  tx_mii_udp_0 (.clk(TX_CLK), 
                            .c_done(LINK_ON), 
                            .dst_ip(DST_IP[31:0]), 
                            .dst_mac(DST_MAC[47:0]), 
                            .dst_port(DST_PORT[15:0]), 
                            .src_ip(SRC_IP[31:0]), 
                            .src_mac(SRC_MAC[47:0]), 
                            .src_port(SRC_PORT[15:0]), 
                            .txd_in(txd_in[7:0]), 
                            .txen_in(txen_in), 
                            .mii_txd(TXD[3:0]), 
                            .mii_txen(TX_EN), 
                            .tcm_ra(tcm_ra[8:0]), 
                            .tx_done(tx_done));
   GND  XLXI_80 (.G(L));
endmodule
`timescale 1ns / 1ps

module tx_rcv_MUSER_input_rcv(CLK25M, 
                              CLK72M, 
                              C_DONE, 
                              EMB_RXD, 
                              EMB_TX_DATA, 
                              EMB_TX_REQ, 
                              FRAME_ALT, 
                              PA_DST_IP, 
                              PA_DST_MAC, 
                              PA_DST_PORT, 
                              PA_LINK_ON, 
                              PA_RX_OK, 
                              PA_SRC_IP, 
                              PA_SRC_MAC, 
                              PA_SRC_PORT, 
                              RX_FAN_ON, 
                              SS_NE, 
                              STARTN_DLY, 
                              tcm_e, 
                              tcm_v, 
                              tcm_wd, 
                              TX_CLK, 
                              EMB_RSP_DATA, 
                              EMB_RSP_REQ, 
                              EMB_TXD, 
                              PA_TXD, 
                              PA_TX_EN, 
                              RH_CSUM_OK_P, 
                              SENS_SCL, 
                              SENS_SCL_TP, 
                              SENS_SDA_TP, 
                              TMP_CSUM_OK_P, 
                              SENS_SDA);

    input CLK25M;
    input CLK72M;
    input C_DONE;
    input EMB_RXD;
    input [79:0] EMB_TX_DATA;
    input EMB_TX_REQ;
    input FRAME_ALT;
    input [31:0] PA_DST_IP;
    input [47:0] PA_DST_MAC;
    input [15:0] PA_DST_PORT;
    input PA_LINK_ON;
    input PA_RX_OK;
    input [31:0] PA_SRC_IP;
    input [47:0] PA_SRC_MAC;
    input [15:0] PA_SRC_PORT;
    input RX_FAN_ON;
    input SS_NE;
    input STARTN_DLY;
    input tcm_e;
    input tcm_v;
    input [7:0] tcm_wd;
    input TX_CLK;
   output [79:0] EMB_RSP_DATA;
   output EMB_RSP_REQ;
   output EMB_TXD;
   output [3:0] PA_TXD;
   output PA_TX_EN;
   output RH_CSUM_OK_P;
   output SENS_SCL;
   output SENS_SCL_TP;
   output SENS_SDA_TP;
   output TMP_CSUM_OK_P;
    inout SENS_SDA;
   
   wire [15:0] EMB_HUMID;
   wire [15:0] EMB_POWER1;
   wire [15:0] EMB_POWER2;
   wire [15:0] EMB_POWER3;
   wire [15:0] EMB_POWER4;
   wire [15:0] EMB_POWER5;
   wire [15:0] EMB_POWER6;
   wire [15:0] EMB_POWER7;
   wire [15:0] EMB_POWER8;
   wire [15:0] EMB_TEMP;
   wire H;
   wire [15:0] SENS_HUMID;
   wire [15:0] SENS_POWER;
   wire [15:0] SENS_TEMP;
   wire STARTN;
   wire XLXN_86;
   wire XLXN_89;
   wire SENS_SCL_TP_DUMMY;
   wire SENS_SDA_TP_DUMMY;
   
   assign SENS_SCL_TP = SENS_SCL_TP_DUMMY;
   assign SENS_SDA_TP = SENS_SDA_TP_DUMMY;
   adc_sensor_ctrl_b  adc_sensor0 (.clk(CLK25M), 
                                  .frame_alt(FRAME_ALT), 
                                  .sda_in(SENS_SDA_TP_DUMMY), 
                                  .startn_in(STARTN), 
                                  .adc_err_det(), 
                                  .adc2_err_det(), 
                                  .busy(), 
                                  .cnt_rst(), 
                                  .rh_csum_ok_p(RH_CSUM_OK_P), 
                                  .rh_dout(SENS_HUMID[15:0]), 
                                  .scl(SENS_SCL_TP_DUMMY), 
                                  .sdao(XLXN_86), 
                                  .sda_ot(XLXN_89), 
                                  .sens_err_det(), 
                                  .tmp_csum_ok_p(TMP_CSUM_OK_P), 
                                  .tmp_dout(SENS_TEMP[15:0]), 
                                  .volt_dout(SENS_POWER[15:0]));
   rs232c_emb_MUSER_input_rcv  rs232c_emb0 (.CLK(CLK72M), 
                                           .EMB_TX_DATA(EMB_TX_DATA[79:0]), 
                                           .EMB_TX_REQ(EMB_TX_REQ), 
                                           .FRAME_ALT(FRAME_ALT), 
                                           .RXD(EMB_RXD), 
                                           .SDI_FAN_ON(RX_FAN_ON), 
                                           .STARTN(STARTN), 
                                           .STARTN_DLY(STARTN_DLY), 
                                           .CMD_RX_REQ(), 
                                           .CMD_TX_REQ(), 
                                           .EMB_BAUD_RATE(), 
                                           .EMB_RSP_DATA(EMB_RSP_DATA[79:0]), 
                                           .EMB_RSP_REQ(EMB_RSP_REQ), 
                                           .EMB_TP_OUT(), 
                                           .HUMIDITY1(EMB_HUMID[15:0]), 
                                           .HUMIDITY2(), 
                                           .POWER1(EMB_POWER1[15:0]), 
                                           .POWER2(EMB_POWER2[15:0]), 
                                           .POWER3(EMB_POWER3[15:0]), 
                                           .POWER4(EMB_POWER4[15:0]), 
                                           .POWER5(EMB_POWER5[15:0]), 
                                           .POWER6(EMB_POWER6[15:0]), 
                                           .POWER7(EMB_POWER7[15:0]), 
                                           .POWER8(EMB_POWER8[15:0]), 
                                           .POWER9(), 
                                           .RXD_O(), 
                                           .TEMPERATURE1(EMB_TEMP[15:0]), 
                                           .TEMPERATURE2(), 
                                           .TXD(EMB_TXD));
   tx_process_MUSER_input_rcv  tx_process_a (.CLK25M(CLK25M), 
                                            .DST_IP(PA_DST_IP[31:0]), 
                                            .DST_MAC(PA_DST_MAC[47:0]), 
                                            .DST_PORT(PA_DST_PORT[15:0]), 
                                            .frame_alt(FRAME_ALT), 
                                            .HUMID1(SENS_HUMID[15:0]), 
                                            .HUMID2(EMB_HUMID[15:0]), 
                                            .LINK_ON(PA_LINK_ON), 
                                            .POWER1(SENS_POWER[15:0]), 
                                            .POWER2(EMB_POWER1[15:0]), 
                                            .RX_OK(PA_RX_OK), 
                                            .SRC_IP(PA_SRC_IP[31:0]), 
                                            .SRC_MAC(PA_SRC_MAC[47:0]), 
                                            .SRC_PORT(PA_SRC_PORT[15:0]), 
                                            .SS_NE(SS_NE), 
                                            .tcm_e(tcm_e), 
                                            .tcm_v(tcm_v), 
                                            .tcm_wd(tcm_wd[7:0]), 
                                            .TEMP1(SENS_TEMP[15:0]), 
                                            .TEMP2(EMB_TEMP[15:0]), 
                                            .TX_CLK(TX_CLK), 
                                            .TXD(PA_TXD[3:0]), 
                                            .TX_EN(PA_TX_EN));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) (* 
         IBUF_DELAY_VALUE = "0" *) (* IFD_DELAY_VALUE = "AUTO" *) 
   IOBUF  XLXI_25 (.I(XLXN_86), 
                  .T(XLXN_89), 
                  .O(SENS_SDA_TP_DUMMY), 
                  .IO(SENS_SDA));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_26 (.I(SENS_SCL_TP_DUMMY), 
                 .O(SENS_SCL));
   INV  XLXI_32 (.I(C_DONE), 
                .O(STARTN));
   VCC  XLXI_33 (.P(H));
endmodule
`timescale 1ns / 1ps

module input_rcv(CLK25M, 
                 CLK72M, 
                 CLK125M, 
                 CMD_BRIGHTNESS, 
                 CMD_CT_BLUE, 
                 CMD_CT_GREEN, 
                 CMD_CT_RED, 
                 CMD_GAMMA, 
                 CMD_M4_BANK1, 
                 CMD_M4_ON, 
                 CMD_TEST_PAT, 
                 C_DONE, 
                 DSW_PAD_UPDATE, 
                 EMB_RXD, 
                 EMB_TX_DATA, 
                 EMB_TX_REQ, 
                 MEM_PAD, 
                 MEM_PAD_ENA, 
                 M4_SET_DONE, 
                 PA_LINK_ON, 
                 PA_RXD, 
                 PA_RX_CLK, 
                 PA_RX_DV, 
                 PA_TX_CLK, 
                 SPI_MISO, 
                 STARTN_DLY, 
                 BRIGHTNESS, 
                 COLOR_LOSS, 
                 COLOR_LOSS_ON_N, 
                 CS, 
                 CTRLD_CSUM_OK, 
                 CT_BLUE, 
                 CT_GREEN, 
                 CT_RED, 
                 EMB_RSP_DATA, 
                 EMB_RSP_REQ, 
                 EMB_TXD, 
                 ER_UPDATE, 
                 FRAME_ALT, 
                 FRAME_ALT_FRZ, 
                 FREEZE, 
                 FR_RATE, 
                 GAMMA, 
                 HSTP, 
                 H_SIZE, 
                 L, 
                 M4_BANK1, 
                 M4_BRT, 
                 M4_ON, 
                 OUT_CH, 
                 OVP, 
                 PAC_STP, 
                 PAC1_OK, 
                 PANEL_NUM, 
                 PA_CSUM_ERR, 
                 PA_RX_OK, 
                 PA_TXD, 
                 PA_TX_EN, 
                 PNL_ADRS_UPDATE, 
                 REBOOT_N, 
                 RH_CSUM_OK_P, 
                 RXD, 
                 RX_FAN_ON, 
                 RX_IM_DOWNLOAD, 
                 RX_OK, 
                 RX50HZ, 
                 SCK, 
                 SENS_SCL, 
                 SENS_SCL_TP, 
                 SENS_SDA_TP, 
                 SPI_MOSI, 
                 TMP_CSUM_OK_P, 
                 TOTAL_PANEL, 
                 UPDATE_ER_ON, 
                 UPDATE_PNL_NUM, 
                 VSTP, 
                 V_SIZE, 
                 SENS_SDA);

    input CLK25M;
    input CLK72M;
    input CLK125M;
    input [6:0] CMD_BRIGHTNESS;
    input [3:0] CMD_CT_BLUE;
    input [3:0] CMD_CT_GREEN;
    input [3:0] CMD_CT_RED;
    input [2:0] CMD_GAMMA;
    input CMD_M4_BANK1;
    input CMD_M4_ON;
    input [7:0] CMD_TEST_PAT;
    input C_DONE;
    input DSW_PAD_UPDATE;
    input EMB_RXD;
    input [79:0] EMB_TX_DATA;
    input EMB_TX_REQ;
    input [9:0] MEM_PAD;
    input MEM_PAD_ENA;
    input M4_SET_DONE;
    input PA_LINK_ON;
    input [3:0] PA_RXD;
    input PA_RX_CLK;
    input PA_RX_DV;
    input PA_TX_CLK;
    input SPI_MISO;
    input STARTN_DLY;
   output [6:0] BRIGHTNESS;
   output [2:0] COLOR_LOSS;
   output COLOR_LOSS_ON_N;
   output CS;
   output CTRLD_CSUM_OK;
   output [3:0] CT_BLUE;
   output [3:0] CT_GREEN;
   output [3:0] CT_RED;
   output [79:0] EMB_RSP_DATA;
   output EMB_RSP_REQ;
   output EMB_TXD;
   output ER_UPDATE;
   output FRAME_ALT;
   output FRAME_ALT_FRZ;
   output FREEZE;
   output [15:0] FR_RATE;
   output [2:0] GAMMA;
   output [10:0] HSTP;
   output [10:0] H_SIZE;
   output L;
   output M4_BANK1;
   output [6:0] M4_BRT;
   output M4_ON;
   output [2:0] OUT_CH;
   output OVP;
   output PAC_STP;
   output PAC1_OK;
   output [9:0] PANEL_NUM;
   output PA_CSUM_ERR;
   output PA_RX_OK;
   output [3:0] PA_TXD;
   output PA_TX_EN;
   output PNL_ADRS_UPDATE;
   output REBOOT_N;
   output RH_CSUM_OK_P;
   output [7:0] RXD;
   output RX_FAN_ON;
   output RX_IM_DOWNLOAD;
   output RX_OK;
   output RX50HZ;
   output SCK;
   output SENS_SCL;
   output SENS_SCL_TP;
   output SENS_SDA_TP;
   output SPI_MOSI;
   output TMP_CSUM_OK_P;
   output [9:0] TOTAL_PANEL;
   output UPDATE_ER_ON;
   output [9:0] UPDATE_PNL_NUM;
   output [10:0] VSTP;
   output [10:0] V_SIZE;
    inout SENS_SDA;
   
   wire bsm_re;
   wire H;
   wire [31:0] PA_DST_IP;
   wire [47:0] PA_DST_MAC;
   wire [15:0] PA_DST_PORT;
   wire PA_OPACP;
   wire PA_OVP;
   wire [7:0] PA_RXDQ;
   wire PA_RX_DVQ;
   wire [31:0] PA_SRC_IP;
   wire [47:0] PA_SRC_MAC;
   wire [15:0] PA_SRC_PORT;
   wire [17:0] ram_ra;
   wire [7:0] ram_rd;
   wire [9:0] rcm_ra;
   wire [7:0] rcm_rd;
   wire RX_CLK;
   wire rx_q;
   wire SS_NE;
   wire tcm_e;
   wire tcm_v;
   wire [7:0] tcm_wd;
   wire TX_CLK;
   wire XLXN_388;
   wire XLXN_691;
   wire XLXN_808;
   wire XLXN_831;
   wire XLXN_832;
   wire RX_FAN_ON_DUMMY;
   wire L_DUMMY;
   wire PA_RX_OK_DUMMY;
   wire FRAME_ALT_DUMMY;
   
   assign FRAME_ALT = FRAME_ALT_DUMMY;
   assign L = L_DUMMY;
   assign PA_RX_OK = PA_RX_OK_DUMMY;
   assign RX_FAN_ON = RX_FAN_ON_DUMMY;
   flash_ctrl_s25fl  flash_c0 (.bsm_re(bsm_re), 
                              .clk(CLK25M), 
                              .c_done(C_DONE), 
                              .frame_alt(), 
                              .rcm_rd(rcm_rd[7:0]), 
                              .rx_q(rx_q), 
                              .clk_en(XLXN_831), 
                              .cs_en(XLXN_832), 
                              .rcm_ra(rcm_ra[9:0]), 
                              .sdo(XLXN_691), 
                              .tx_d(tcm_wd[7:0]), 
                              .tx_e(tcm_e), 
                              .tx_v(tcm_v));
   flash_if  flash_if_0 (.clk_en(XLXN_831), 
                        .clk_in(CLK25M), 
                        .cs_en(XLXN_832), 
                        .q(SPI_MISO), 
                        .sdi(XLXN_691), 
                        .clk(SCK), 
                        .cs(CS), 
                        .d(SPI_MOSI), 
                        .rx_q(rx_q));
   frame_generator  frame_generator_0 (.clk(CLK125M), 
                                      .c_done(C_DONE), 
                                      .ram_rd(ram_rd[7:0]), 
                                      .ovp(PA_OVP), 
                                      .pac_stp(PA_OPACP), 
                                      .ram_ra(ram_ra[17:0]), 
                                      .rxd(PA_RXDQ[7:0]), 
                                      .rxen(PA_RX_DVQ), 
                                      .rxerr(), 
                                      .rx_ok(PA_RX_OK_DUMMY));
   rx_ctrld_MUSER_input_rcv  rx_ctrld0 (.CLK(CLK125M), 
                                       .CMD_BRIGHTNESS(CMD_BRIGHTNESS[6:0]), 
                                       .CMD_CT_BLUE(CMD_CT_BLUE[3:0]), 
                                       .CMD_CT_GREEN(CMD_CT_GREEN[3:0]), 
                                       .CMD_CT_RED(CMD_CT_RED[3:0]), 
                                       .CMD_GAMMA(CMD_GAMMA[2:0]), 
                                       .CMD_M4_BANK1(CMD_M4_BANK1), 
                                       .CMD_M4_ON(CMD_M4_ON), 
                                       .CMD_TEST_PAD(CMD_TEST_PAT[7:0]), 
                                       .C_DONE(C_DONE), 
                                       .DSW_PAD_UPDATE(DSW_PAD_UPDATE), 
                                       .MEM_PAD(MEM_PAD[9:0]), 
                                       .MEM_PAD_ENA(MEM_PAD_ENA), 
                                       .M4_SET_DONE(M4_SET_DONE), 
                                       .PA_PAC_STP(PA_OPACP), 
                                       .PA_RXD(PA_RXDQ[7:0]), 
                                       .PA_RX_DV(PA_RX_DVQ), 
                                       .PA_RX_ER(L_DUMMY), 
                                       .PA_RX_OK(PA_RX_OK_DUMMY), 
                                       .PA_RX50HZ(L_DUMMY), 
                                       .PA_VP(PA_OVP), 
                                       .BRIGHTNESS(BRIGHTNESS[6:0]), 
                                       .COLOR_LOSS(COLOR_LOSS[2:0]), 
                                       .COLOR_LOSS_ON_N(COLOR_LOSS_ON_N), 
                                       .CTRLD_CSUM_OK(CTRLD_CSUM_OK), 
                                       .CT_BLUE(CT_BLUE[3:0]), 
                                       .CT_GREEN(CT_GREEN[3:0]), 
                                       .CT_RED(CT_RED[3:0]), 
                                       .ER_UPDATE(ER_UPDATE), 
                                       .FRAME_ALT(FRAME_ALT_DUMMY), 
                                       .FRAME_ALT_FRZ(FRAME_ALT_FRZ), 
                                       .FREEZE(FREEZE), 
                                       .FR_RATE(FR_RATE[15:0]), 
                                       .GAMMA(GAMMA[2:0]), 
                                       .HSTP(HSTP[10:0]), 
                                       .H_SIZE(H_SIZE[10:0]), 
                                       .M4_BANK1(M4_BANK1), 
                                       .M4_BRT(M4_BRT[6:0]), 
                                       .M4_ON(M4_ON), 
                                       .OUT_CH(OUT_CH[2:0]), 
                                       .OVP(OVP), 
                                       .PAC_STP(PAC_STP), 
                                       .PAC1_OK(PAC1_OK), 
                                       .PANEL_NUM(PANEL_NUM[9:0]), 
                                       .PNL_ADRS_UPDATE(PNL_ADRS_UPDATE), 
                                       .REBOOT_N(REBOOT_N), 
                                       .RXD(RXD[7:0]), 
                                       .RX_FAN_ON(RX_FAN_ON_DUMMY), 
                                       .RX_IM_DOWNLOAD(RX_IM_DOWNLOAD), 
                                       .RX_OK(RX_OK), 
                                       .RX50HZ(RX50HZ), 
                                       .TOTAL_PANEL(TOTAL_PANEL[9:0]), 
                                       .UPDATE_ER_ON(UPDATE_ER_ON), 
                                       .UPDATE_PNL_NUM(UPDATE_PNL_NUM[9:0]), 
                                       .VSTP(VSTP[10:0]), 
                                       .V_SIZE(V_SIZE[10:0]));
   rx_mii_udp  rx_mii_udp_0 (.clk25M(CLK25M), 
                            .clk125M(CLK125M), 
                            .c_done(C_DONE), 
                            .ram_ra(ram_ra[17:0]), 
                            .rcm_ra(rcm_ra[9:0]), 
                            .rx_clk(RX_CLK), 
                            .rx_d(PA_RXD[3:0]), 
                            .rx_dv(PA_RX_DV), 
                            .bsm_re(bsm_re), 
                            .exter_ip(PA_DST_IP[31:0]), 
                            .exter_mac(PA_DST_MAC[47:0]), 
                            .exter_port(PA_DST_PORT[15:0]), 
                            .local_ip(PA_SRC_IP[31:0]), 
                            .local_mac(PA_SRC_MAC[47:0]), 
                            .local_port(PA_SRC_PORT[15:0]), 
                            .pac_err(), 
                            .ram_rd(ram_rd[7:0]), 
                            .rcm_rd(rcm_rd[7:0]), 
                            .rx_er(PA_CSUM_ERR), 
                            .ss_ne(SS_NE));
   tx_rcv_MUSER_input_rcv  tx_rcv_o (.CLK25M(CLK25M), 
                                    .CLK72M(CLK72M), 
                                    .C_DONE(C_DONE), 
                                    .EMB_RXD(EMB_RXD), 
                                    .EMB_TX_DATA(EMB_TX_DATA[79:0]), 
                                    .EMB_TX_REQ(EMB_TX_REQ), 
                                    .FRAME_ALT(FRAME_ALT_DUMMY), 
                                    .PA_DST_IP(PA_DST_IP[31:0]), 
                                    .PA_DST_MAC(PA_DST_MAC[47:0]), 
                                    .PA_DST_PORT(PA_DST_PORT[15:0]), 
                                    .PA_LINK_ON(PA_LINK_ON), 
                                    .PA_RX_OK(PA_RX_OK_DUMMY), 
                                    .PA_SRC_IP(PA_SRC_IP[31:0]), 
                                    .PA_SRC_MAC(PA_SRC_MAC[47:0]), 
                                    .PA_SRC_PORT(PA_SRC_PORT[15:0]), 
                                    .RX_FAN_ON(RX_FAN_ON_DUMMY), 
                                    .SS_NE(SS_NE), 
                                    .STARTN_DLY(STARTN_DLY), 
                                    .tcm_e(tcm_e), 
                                    .tcm_v(tcm_v), 
                                    .tcm_wd(tcm_wd[7:0]), 
                                    .TX_CLK(TX_CLK), 
                                    .EMB_RSP_DATA(EMB_RSP_DATA[79:0]), 
                                    .EMB_RSP_REQ(EMB_RSP_REQ), 
                                    .EMB_TXD(EMB_TXD), 
                                    .PA_TXD(PA_TXD[3:0]), 
                                    .PA_TX_EN(PA_TX_EN), 
                                    .RH_CSUM_OK_P(RH_CSUM_OK_P), 
                                    .SENS_SCL(SENS_SCL), 
                                    .SENS_SCL_TP(SENS_SCL_TP), 
                                    .SENS_SDA_TP(SENS_SDA_TP), 
                                    .TMP_CSUM_OK_P(TMP_CSUM_OK_P), 
                                    .SENS_SDA(SENS_SDA));
   (* IOSTANDARD = "DEFAULT" *) (* IBUF_DELAY_VALUE = "0" *) 
   IBUFG  XLXI_22 (.I(PA_RX_CLK), 
                  .O(XLXN_388));
   BUFG  XLXI_23 (.I(XLXN_388), 
                 .O(RX_CLK));
   VCC  XLXI_94 (.P(H));
   GND  XLXI_95 (.G(L_DUMMY));
   BUFG  XLXI_110 (.I(XLXN_808), 
                  .O(TX_CLK));
   (* IOSTANDARD = "DEFAULT" *) (* IBUF_DELAY_VALUE = "0" *) 
   IBUFG  XLXI_111 (.I(PA_TX_CLK), 
                   .O(XLXN_808));
endmodule
